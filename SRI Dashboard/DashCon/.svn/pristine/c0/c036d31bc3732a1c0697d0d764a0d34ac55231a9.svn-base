

App.View.ModuleView = Backbone.View.extend({
	
	template : "",
	
	initialize : function( options ) {
		// Grab passed parameters upon initiation
		this.options = options || {};
		
		if( this.options.templateId !== undefined ) {
			this.template = template(this.options.templateId);
		}
		
		if( this.options.childModel !== undefined ) {
			this.model = this.model.get( this.options.childModel );
		}
		
		// Event listeners:
		App.Event.Vehicle.on( "load", this.reloadModule, this );
	},
	
	events : {
		"click #btnRefresh" : "refreshModule",
		"click #btnClear" : "clearModule"
	},
	
	showLoader: function() {
		$('#mainLoader').removeClass('hidden');
		// always return this
		return this;
	},
	
	hideLoader: function() {
		$('#mainLoader').addClass('hidden');
		// always return this
		return this;
	},
	
	refreshModule : function () {
		var $this = this;
		
		$this.showLoader();
		
		setTimeout(function() {
			$this.hideLoader();
			$this.render();
		}, 500);
		
		return this;
	},
	
	clearModule : function() {
		this.$el.find('.well').html("");
	},
	
	reloadModule : function ( newModel ) {
		var $this = this;
		
		$this.showLoader();
		
		if( this.options.childModel !== undefined )
			$this.model = newModel.get(this.options.childModel);
		else
			$this.model = newModel;
		
		setTimeout(function() {
			$this.hideLoader();
			$this.render();
		}, 500);
		
		return this;
	},
	
	render: function () {
		var template = this.template( this.model.attributes );
		this.$el.html( template );
		this.$el.find('.log-time').append(moment().format("h:mm:ss"));
		return this;
	}
	
});
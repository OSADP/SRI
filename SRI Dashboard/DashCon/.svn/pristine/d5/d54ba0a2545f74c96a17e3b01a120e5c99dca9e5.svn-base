/**
* Truckfeed Module
*
* Description
* Controls the truckfeed portion of the SRI application.
* This gathers all weight reports, and trucks passing by
* the WIM in real time(latency involved).
* 
* Dependencies
* $rootScope is used here merely for $broadcast, which similar to jquery's trigger()
* $scope is the scope of our application SRI.DASHBOARD
* $http will be used to make ajax requests
* $filter is service used for accessing the angular filter 'orderBy' which maps our feed by order
* service.WeightReports (scripts/services/WeightReports.js) is a service for getting and building
* our weight reports from the database for user display
* sri.module.Effects (scripts/directives/sri.directive.MaterialEffect.js)
* 	= contains a directive for the Google Material click effect.
*/
'use strict';
angular.module('sri.module.Truckfeed', ['sri.module.Effects'])
	.controller('TruckFeedCTRL', ['$rootScope', '$scope', '$http', '$filter', 'service.WeightReports', truckFeedCtrl])

function truckFeedCtrl( $rootScope, $scope, $http, $filter, WeightReports ) {
	// these are the variables added to our scope
	$scope.trucks = [];
	// initialize our truck object
	$scope.truck = $scope.truck || {};
	$scope.truck.current = {};
	$scope.truck.scroll = true;
	// Truck sequence is a cached object for faster
	// locating of a truck using its sequence number.
	var truckSequence = {};
	// get time two hours ago and use as a time limit
	var twoHoursAgo = moment( new Date() ).subtract(2, 'hours').format('YYYY-MM-DD H:mm:ss');
	// get all weight reports and passing a time limit
	// will populate within the time limit.
	WeightReports.getAllWeights( twoHoursAgo )
	.then( function( weightReports ) {
		var weights = weightReports.wims;
		var scales = weightReports.scales;
		// match data from weight report to the truck phone data
		// using the sequence number
		if( weights != undefined ) {
			$http.get('/DashCon/resources/truck').success( function( response ) {
				var trucks = response.truckFeed;
				var truckfeed = [];
				var tempWeights = weights;
			
				for( var x = 0, len = tempWeights.length; x < len; x++ ) {
					var weight = tempWeights[x];
					if( weight != undefined ) {
						angular.forEach(trucks, function( truck, index ) {
							// Check if feed has Static Scale
							angular.forEach( scales, function( scale, index ) {
								if( weight.sequenceNumber == scale.sequenceNumber ) {
									weight.hasScale = true;
									scales.splice( index, 1 );
								}
							});
							// Begin merging trucks with similar timestamp
							if( weight.sequenceNumber == truck.sequenceNumber ) {
								// Merge the weight's properties with the truck's
								angular.extend( truck, weight );
								// Adds a Phone Icon if it does have a truckfeed
								truck.hasPhone = true;
								truckfeed.push( truck );
								truckSequence[truck.sequenceNumber.toString()] = truck;
								trucks.splice(index, 1);
								weights.splice(x, 1);
							}
						});
					}
				} //end for
				
				angular.forEach( weights, function( weight ) {
					truckfeed.push( weight );
					truckSequence[weight.sequenceNumber.toString()] = weight;
				});
				
				// Sort our truckfeed array to fix the "Current Truck" issue.
				truckfeed = $filter('orderBy')(truckfeed, 'timestamp', false);
				$scope.trucks = truckfeed;
				// Set current truck to the latest, which is the last entry
				if( truckfeed.length > 0 )
				$scope.truck.current = $scope.trucks[ $scope.trucks.length - 1 ];
				
			});
			
		}
	
	});
	
	function pollTrucksApp() {
		$http.get('/DashCon/truckFeedPoll').success( function( data ) {
			// Disregard invalid entries
			if( data.timestamp == null || data.timestamp == "null" ) return false;
			$rootScope.$broadcast('truckFeedNew', data);
			truckPhoneAppEntry( data.sequenceNumber );
			pollTrucksApp();
		}).error( function( err ) {
			console.log( err );
			pollTrucksApp();
		});
	}		
	
	function pollTrucksMettler() {
		$http.get('/DashCon/mettPoll').success( function( data ) {
			if( data.scaleType == 'W' ) {
				populateFeedNew( data );
			} else if( data.scaleType == 'S' ) {
				staticScaleEntry( data.sequenceNumber );
			}
			pollTrucksMettler();
		}).error( function( err ) {
			console.log( err );
			pollTrucksMettler();
		});
	}
	
	function populateFeedNew( data ) {
		var twoHoursAgo = moment( new Date() ).subtract(2, 'hours').format('MM-DD-YYYY H:mm:ss');
		if( moment(data.timestamp, 'YYYY-MM-DD H:mm:ss').isAfter(moment(twoHoursAgo, 'YYYY-MM-DD H:mm:ss')) ) {					
			
			data.displayTime = moment(data.timestamp).format('MM-DD-YYYY H:mm:ss');
			
			if( data.grossWeight != undefined ) {
				data.passed = ( data.status == 'P' ) ? 'passed' : 'failed';
			}
			
			if( data.driversLicense == undefined || data.driversLicense == null || data.driversLicense == "null" ) {
				data.licensePlate = data.commercialDriversLicense;
			}
			
			if( $scope.truck.current == undefined || $scope.trucks.length == 0 ) {
				if( $scope.truck.scroll === true ) {
					$scope.truck.current = data;
				}
				$scope.trucks.push( data );
			} else if( ! moment($scope.trucks[$scope.trucks.length -1].timestamp, 'YYYY-MM-DD H:mm:ss').isSame(moment(data.timestamp, 'YYYY-MM-DD H:mm:ss')) ) {	
				if( $scope.truck.scroll === true ) {
					$scope.truck.current = data;
				}
				$scope.trucks.push( data );
				if( data.sequenceNumber == undefined )
					console.log( data );
				truckSequence[data.sequenceNumber.toString()] = data;
			}
		}
	}

	$scope.loadValues = function() {
		$scope.truck.current.active = false;
		this.truck.active = true;
		$scope.truck.current = this.truck;
		$('#phoneSideBar').trigger('phone:touch');
	};
	
	$scope.$watch('truck.current', function( newValue, oldValue ) {
		// Disregard undefined responses
		if( newValue == undefined ) return false;
		
		if( newValue != oldValue && $scope.truck.scroll === true ) {
			if( oldValue != undefined ) {
				oldValue.active = false;
			}
			newValue.active = true;
		}
	});
	
	function staticScaleEntry( sequenceNumber ) {
		if( truckSequence[ sequenceNumber ] == undefined ) return false;
		truckSequence[ sequenceNumber ].hasScale = true;
		if( $scope.truck.scroll === true ) {
			$scope.truck.current = truckSequence[ sequenceNumber ];
		}
	}
	
	function truckPhoneAppEntry( sequenceNumber ) {
		if( truckSequence[ sequenceNumber ] == undefined ) return false;
		truckSequence[ sequenceNumber ].hasPhone = true;
	}
	
	
	// Run Polling
	pollTrucksApp();
	pollTrucksMettler();
	
};
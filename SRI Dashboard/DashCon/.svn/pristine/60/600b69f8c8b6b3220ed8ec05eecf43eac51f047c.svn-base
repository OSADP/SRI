

App.View.VehicleEntryItem = Backbone.View.extend({
	
	template: template("vehicle-entry-list"),
	
	initialize : function () {
		// listen to the trigger refresh list
		App.Event.Vehicle.on( "refresh-list", this.verifyActive, this );
	},
	
	events : {
		"click" : "activateVehicle"
	},
	
	testFoo : function() {
		console.log(this);
		// always return this
		return this;
	},
	
	verifyActive : function () {
		console.log("Initiated Verify Active");
		// check if this entry is active and trigger load of data into modules
		if ( this.$el.find('.truck-entry-box').hasClass("active") ) {
			console.log("Active Found: ");
			console.log($(this.$el.find('.truck-entry-box')));
			App.Event.Vehicle.trigger("load", this.model);
		}
		// always return this
		return this;
	},
	
	activateVehicle : function() {
		console.log("Initiated Activate Vehicle");
		// Show Loader
		this.showLoader();
		// traverse and locate active item and remove class .active:
		this.$el.parent('#vehicleEntries')
			.find('.active')
			.removeClass("active")
			.find('.glyphicon-chevron-right')
			.addClass('hidden');
		//traverse and locate clicked item and add class .active:
		this.$el.find('.truck-entry-box')
			.addClass("active")
			.find('.glyphicon-chevron-right')
			.removeClass('hidden');
		// check if this entry is active and trigger load of data into modules
		App.Event.Vehicle.trigger("load", this.model);
		// always return this
		return this;
	},
	
	showLoader: function() {
		$('#mainLoader').removeClass('hidden');
		// always return this
		return this;
	},
	
	hideLoader: function() {
		$('#mainLoader').addClass('hidden');
		// always return this
		return this;
	},
	
	render : function() {
		var item = this.template( this.model.attributes );
		this.$el.html( item );
		// always return this
		return this;
	}
	
});

App.View.ListVehicleEntries = Backbone.View.extend({
	
	el: '#vehicleEntries',
	
	initialize: function() {
	    var self = this;
	    this._views = [];
	    // create a sub view for every model in the collection
	    this.collection.each( function( model ) {
	      self._views.push( new App.View.VehicleEntryItem({ model: model }) );
	    });
	    
	    // listen for our Vehicle event handler
		//this.listenTo(App.Event.Vehicle, "pass", this.testFoo, this);
	},
	
	events : {
	},
	
	testFoo : function() {
		console.log(this);
		// always return this
		return this;
	},
	
	render: function() {
		// empty our View's element
		this.showLoader();
		this.$el.empty();
		// create a DOM Fragment to temporarily contain all our vehicle entry item
		var container = document.createDocumentFragment();
		// render each subview, appending to our DOM Fragment
		_.each(this._views, function( item ) {
		  $(container).append(item.render().el);
		});
		// do a 1 time append to our DOM, this whole process makes it faster
		// especially for slower computers and handheld devices
		this.$el.append(container);
		// set the first item in the list to be active
		//this.$el.find('.truck-entry-box').filter(':first').addClass('active');
		this._views[0].activateVehicle();
		this.hideLoader();
		// always return this
		return this;
	},
	
	showLoader: function() {
		$('#mainLoader').removeClass('hidden');
		// always return this
		return this;
	},
	
	hideLoader: function() {
		$('#mainLoader').addClass('hidden');
		// always return this
		return this;
	},
	
	addOne: function( model ) {
		var item = new App.View.VehicleEntryItem({model: model});
		this.$el.append( item.render().$el );
		// always return this
		return this;
	}
});

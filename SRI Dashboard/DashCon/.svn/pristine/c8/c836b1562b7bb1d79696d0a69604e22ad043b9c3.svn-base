
'use strict';


angular.module('sri.controller.truckfeed', [])
	.controller('TruckFeedCTRL', ['$rootScope', '$scope', '$http', '$filter', function( $rootScope, $scope, $http, $filter ) {
		$scope.trucks = [];
		$scope.truck = $scope.truck || {};
		$scope.feed = $scope.feed || {};
		$scope.truck.current = {};
		

		var truckSequence = {};

		$http.get('/DashCon/resources/weight/all').success( function( response ) {
			if( response.weightReport != undefined ) {
				var weightReports = [];
				if( response.weightReport.timestamp == undefined ) {
					angular.forEach(response.weightReport, function( weight ) {
						weight.displayTime = moment( weight.timestamp ).format('MM-DD-YYYY H:mm:ss');
					});
					
					weightReports = response.weightReport;
				} else {
					response.weightReport.displayTime = moment( response.weightReport.timestamp ).format('MM-DD-YYYY H:mm:ss');
					weightReports.push(response.weightReport);
				}
				
				var twoHoursAgo = moment( new Date() ).subtract(2, 'hours').format('YYYY-MM-DD H:mm:ss');
	
				var weights = [];
				var scales = [];
				var weight = null;
				for( var x = 0, len = weightReports.length; x < len; x++ ) {
					weight = weightReports[x];
					if( weight != undefined ) {
						if( moment(weight.timestamp, 'YYYY-MM-DD H:mm:ss').isAfter(moment(twoHoursAgo, 'YYYY-MM-DD H:mm:ss')) ) {
							// Add the PASS Status of the feed
							if( weight.grossWeight != undefined ) {
								weight.passed = 'passed';
								if( weight.status == 'F' ) {
									weight.passed = 'failed';
								}
							}
							if( weight.scaleType === 'W' ) {
								weights.push( weight );
							} else if ( weight.scaleType === 'S' ) {
								scales.push( weight );
							}
						}
					}
				}
				
				if( weights != undefined ) {
					
					$http.get('/DashCon/resources/truck').success( function( response ) {
						
						var trucks = response.truckFeed;
						
						var truckfeed = [];
						
						var tempWeights = weights;
					
						for( var x = 0, len = tempWeights.length; x < len; x++ ) {
							weight = tempWeights[x];
							if( weight != undefined ) {
								angular.forEach(trucks, function( truck, index ) {
									// Begin merging trucks with similar timestamp
//									if( moment(weight.timestamp, 'YYYY-MM-DD H:mm:ss').isSame(moment(truck.timestamp, 'YYYY-MM-DD H:mm:ss')) ) {
									if( weight.sequenceNumber == truck.sequenceNumber ) {
										// Merge the weight's properties with the truck's
										angular.extend( truck, weight );
										// Adds a Phone Icon if it does have a truckfeed
										truck.hasPhone = true;
										truckfeed.push( truck );
										truckSequence[truck.sequenceNumber.toString()] = truck;
										trucks.splice(index, 1);
										weights.splice(x, 1);
									}
									
									angular.forEach( scales, function( scale, index ) {
										if( weight.sequenceNumber == scale.sequenceNumber ) {
											weight.hasScale = true;
											scales.splice( index, 1 );
										}
									});
								});
							}
						} //end for
						
						console.info('Weights Without Phone App:');
						console.info( weights );
						
						angular.forEach( weights, function( weight ) {
							//if( moment(weight.timestamp).isAfter( twoHoursAgo ) ) {
								truckfeed.push( weight );
								truckSequence[weight.sequenceNumber.toString()] = weight;
							//}
						});
						
						// Sort our truckfeed array to fix the "Current Truck" issue.
						truckfeed = $filter('orderBy')(truckfeed, 'timestamp', false);
						$scope.trucks = truckfeed;
						// Set current truck to the latest, which is the last entry
						if( truckfeed.length > 0 )
						$scope.truck.current = $scope.trucks[ $scope.trucks.length - 1 ];
						
					});
					
				}
			}
			
		});
		
		function pollTrucksApp() {
			$http.get('/DashCon/truckFeedPoll').success( function( data ) {
				// Disregard invalid entries
				if( data.timestamp == null || data.timestamp == "null" ) return false;
				//populateFeedNew( data );
				$rootScope.$broadcast('truckFeedNew', data);
				truckPhoneAppEntry( data.sequenceNumber );
				pollTrucksApp();
			}).error( function( err ) {
				console.log( err );
				pollTrucksApp();
			});
		}		
		
		function pollTrucksMettler() {
			$http.get('/DashCon/mettPoll').success( function( data ) {
				if( data.scaleType == 'W' ) {
					populateFeedNew( data );
				} else if( data.scaleType == 'S' ) {
					//$rootScope.$broadcast('staticScale:new', data);
					staticScaleEntry( data.sequenceNumber );
				}
				pollTrucksMettler();
			}).error( function( err ) {
				console.log( err );
				pollTrucksMettler();
			});
		}
		
		function populateFeedNew( data ) {
			var twoHoursAgo = moment( new Date() ).subtract(2, 'hours').format('MM-DD-YYYY H:mm:ss');
			if( moment(data.timestamp, 'YYYY-MM-DD H:mm:ss').isAfter(moment(twoHoursAgo, 'YYYY-MM-DD H:mm:ss')) ) {					
				
				data.displayTime = moment(data.timestamp).format('MM-DD-YYYY H:mm:ss');
				
				if( data.grossWeight != undefined ) {
					data.passed = ( data.status == 'P' ) ? 'passed' : 'failed';
				}
				
				if( data.driversLicense == undefined || data.driversLicense == null || data.driversLicense == "null" ) {
					data.licensePlate = data.commercialDriversLicense;
				}
				
				if( $scope.truck.current == undefined || $scope.trucks.length == 0 ) {
					$scope.truck.current = data;
					$scope.trucks.push( $scope.truck.current );
				} else if( ! moment($scope.trucks[$scope.trucks.length -1].timestamp, 'YYYY-MM-DD H:mm:ss').isSame(moment(data.timestamp, 'YYYY-MM-DD H:mm:ss')) ) {	
					$scope.truck.current = data;
					$scope.trucks.push( $scope.truck.current );
					if( data.sequenceNumber == undefined )
						console.log( data );
					truckSequence[data.sequenceNumber.toString()] = data;
				}
			}
		}
		
		pollTrucksApp();
		pollTrucksMettler();
	
		$scope.loadValues = function() {
			$scope.truck.current = this.truck;
			$('#phoneSideBar').trigger('phone:touch');
		};
		
		$scope.$watch('truck.current', function( newValue, oldValue ) {
			// Disregard undefined responses
			if( newValue == undefined ) return false;
			
			if( newValue != oldValue ) {
				if( oldValue != undefined ) {
					oldValue.active = false;
				}
				newValue.active = true;
			}
		});
		
		function staticScaleEntry( sequenceNumber ) {
			if( truckSequence[ sequenceNumber ] == undefined ) return false;
			truckSequence[ sequenceNumber ].hasScale = true;
			$scope.truck.current = truckSequence[ sequenceNumber ];
		}
		
		function truckPhoneAppEntry( sequenceNumber ) {
			if( truckSequence[ sequenceNumber ] == undefined ) return false;
			truckSequence[ sequenceNumber ].hasPhone = true;
//			$scope.truck.current = truckSequence[ sequenceNumber ];
		}
		
	}])